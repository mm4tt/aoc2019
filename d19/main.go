package main

import (
	"fmt"
	"github.com/mm4tt/aoc2019/intcode"
	"github.com/mm4tt/aoc2019/util"
)

func main() {
	memInput := []int{109, 424, 203, 1, 21102, 1, 11, 0, 1105, 1, 282, 21101, 18, 0, 0, 1106, 0, 259, 2101, 0, 1, 221, 203, 1, 21102, 1, 31, 0, 1106, 0, 282, 21101, 0, 38, 0, 1106, 0, 259, 21002, 23, 1, 2, 22102, 1, 1, 3, 21101, 0, 1, 1, 21102, 57, 1, 0, 1106, 0, 303, 2102, 1, 1, 222, 21002, 221, 1, 3, 21002, 221, 1, 2, 21101, 0, 259, 1, 21101, 0, 80, 0, 1105, 1, 225, 21101, 123, 0, 2, 21101, 91, 0, 0, 1105, 1, 303, 1201, 1, 0, 223, 20101, 0, 222, 4, 21101, 259, 0, 3, 21102, 225, 1, 2, 21101, 0, 225, 1, 21102, 118, 1, 0, 1105, 1, 225, 21001, 222, 0, 3, 21102, 58, 1, 2, 21101, 133, 0, 0, 1105, 1, 303, 21202, 1, -1, 1, 22001, 223, 1, 1, 21102, 1, 148, 0, 1106, 0, 259, 1201, 1, 0, 223, 20101, 0, 221, 4, 21002, 222, 1, 3, 21101, 20, 0, 2, 1001, 132, -2, 224, 1002, 224, 2, 224, 1001, 224, 3, 224, 1002, 132, -1, 132, 1, 224, 132, 224, 21001, 224, 1, 1, 21101, 195, 0, 0, 105, 1, 109, 20207, 1, 223, 2, 20102, 1, 23, 1, 21101, -1, 0, 3, 21102, 214, 1, 0, 1105, 1, 303, 22101, 1, 1, 1, 204, 1, 99, 0, 0, 0, 0, 109, 5, 2101, 0, -4, 249, 22102, 1, -3, 1, 22102, 1, -2, 2, 22101, 0, -1, 3, 21101, 250, 0, 0, 1105, 1, 225, 21202, 1, 1, -4, 109, -5, 2105, 1, 0, 109, 3, 22107, 0, -2, -1, 21202, -1, 2, -1, 21201, -1, -1, -1, 22202, -1, -2, -2, 109, -3, 2106, 0, 0, 109, 3, 21207, -2, 0, -1, 1206, -1, 294, 104, 0, 99, 21201, -2, 0, -2, 109, -3, 2106, 0, 0, 109, 5, 22207, -3, -4, -1, 1206, -1, 346, 22201, -4, -3, -4, 21202, -3, -1, -1, 22201, -4, -1, 2, 21202, 2, -1, -1, 22201, -4, -1, 1, 22102, 1, -2, 3, 21102, 1, 343, 0, 1105, 1, 303, 1105, 1, 415, 22207, -2, -3, -1, 1206, -1, 387, 22201, -3, -2, -3, 21202, -2, -1, -1, 22201, -3, -1, 3, 21202, 3, -1, -1, 22201, -3, -1, 2, 21201, -4, 0, 1, 21102, 1, 384, 0, 1106, 0, 303, 1105, 1, 415, 21202, -4, -1, -4, 22201, -4, -3, -4, 22202, -3, -2, -2, 22202, -2, -4, -4, 22202, -3, -2, -3, 21202, -4, -1, -2, 22201, -3, -2, 1, 21201, 1, 0, -4, 109, -5, 2105, 1, 0}
	c := intcode.NewComputer()

	check := func(x, y int) int {
		c.LoadMemory(memInput)
		c.Input(x, y)
		o, err := c.Run()
		if err != nil {
			panic(err)
		}
		return o.Outputs[0]
	}

	board := make(map[util.Point2D]int)
	count := 0
	for y := 0; y < 100; y++ {
		for x := 0; x < 100; x++ {
			if check(x, y) == 1 {
				count++
				board[util.Point2D{X: x, Y: y}] = 1
			}
		}
	}
	fmt.Println(count)
	draw(board)

	getRange := func(y int) (xMin, xMax int) {
		if y == 0 {
			return 0, 0
		}
		if y < 3 || y == 5 {
			return -1, -2
		}
		xMin, xMax = -1, -1
		for x := 0; ; x++ {
			if check(x, y) == 0 {
				if xMax != -1 {
					break
				}
				continue
			}
			if xMin == -1 {
				xMin = x
			}
			xMax = x
		}
		return xMin, xMax
	}

	willFit := func(y int) bool {
		xMin, xMax := getRange(y)
		fmt.Println(y, ":", xMin, xMax, xMax-xMin+1)
		if xMax-xMin+1 < 100 {
			return false
		}
		if check(xMin, y-99) == 0 {
			return false
		}
		if check(xMin+99, y-99) == 0 {
			return false
		}
		return true
	}

	bad, good := 500, 2000
	for good - bad > 1 {
		y := (good + bad) / 2
		ok := willFit(y)
		fmt.Println(y, ok)
		if ok {
			good = y
		} else {
			bad = y
		}
	}
	fmt.Println(good, bad)


	for y := good-100; y<=good; y++ {
		ok := willFit(y)
		fmt.Println(y, ok)
		if ok {
			good = y
			break
		}
	}

	y := good
	x, _ := getRange(y)
	fmt.Println(x, y)
	fmt.Println(x*10000 + y-99)
}

func draw(b map[util.Point2D]int) {
	util.Draw(b, map[int]rune{1: 'X'})
}

// 6630987 - too high
// 6610984